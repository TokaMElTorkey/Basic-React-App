{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from './Link';\n\nvar Pagination = function (_React$Component) {\n  _inherits(Pagination, _React$Component);\n\n  function Pagination() {\n    _classCallCheck(this, Pagination);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Pagination.prototype.render = function render() {\n    // Only show 10 page links at a time\n    var linkCount = this.props.pageCount > 10 ? 10 : this.props.pageCount;\n    var _props = this.props,\n        pageCount = _props.pageCount,\n        currentPage = _props.currentPage,\n        onPageClick = _props.onPageClick,\n        pageLinkClassName = _props.pageLinkClassName,\n        currentLinkClassName = _props.currentLinkClassName;\n    return React.createElement('div', null, renderLinkNodes(linkCount, pageCount, currentPage, onPageClick, pageLinkClassName, currentLinkClassName));\n  };\n\n  return Pagination;\n}(React.Component);\n\nprocess.env.NODE_ENV !== \"production\" ? Pagination.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  pageCount: PropTypes.number.isRequired,\n  onPageClick: PropTypes.func.isRequired,\n  pageLinkClassName: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  currentLinkClassName: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired\n} : void 0;\n\nvar renderLinkNodes = function renderLinkNodes(linkCount, pageCount, currentPage, onPageClick, pageLinkClassName, currentLinkClassName) {\n  // always render link to first page (0)\n  var first = [renderFirstLink(onPageClick, pageLinkClassName)]; // render previous series of links if needed (currentPage >= 10)\n\n  var previousSeries = shouldRenderPreviousSeries(currentPage) ? renderPreviousSeries(currentPage, onPageClick, pageLinkClassName) : []; // render link to previous page if needed (not on first page)\n\n  var previous = shouldRenderBefore(currentPage) ? renderPreviousLink(currentPage, onPageClick, pageLinkClassName) : []; // render links to pages before current page\n\n  var beforeCurrent = renderBeforeCurrent(currentPage, onPageClick, pageLinkClassName); // render current page link\n\n  var current = renderCurrent(currentPage, onPageClick, pageLinkClassName, currentLinkClassName); // render links to pages after current page\n\n  var afterCurrent = renderAfterCurrent(currentPage, pageCount, onPageClick, pageLinkClassName); // render next series of links if needed\n\n  var nextSeries = shouldRenderNextSeries(currentPage, pageCount) ? renderNextSeries(currentPage, pageCount, onPageClick, pageLinkClassName) : []; // always render link to last page (pageCount - 1)\n\n  var last = renderLastLink(pageCount, onPageClick, pageLinkClassName);\n  var nodes = first.concat(previous) // previous\n  .concat(previousSeries) // ...\n  .concat(beforeCurrent) // 1,2,3,4\n  .concat(current) // 5\n  .concat(afterCurrent) // 6, 7, 8, 9, 10\n  .concat(nextSeries); // ...\n  // render a link to the next page if needed (not on last page)\n\n  if (shouldRenderNext(currentPage, pageCount)) {\n    var nextLink = renderNextLink(currentPage, onPageClick, pageLinkClassName);\n    return nodes.concat(nextLink) // next\n    .concat(last); // last\n  }\n\n  return nodes.concat(last);\n};\n\nvar renderFirstLink = function renderFirstLink(onPageClick, pageLinkClassName) {\n  return React.createElement('div', {\n    key: 'page-link-first',\n    className: pageLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(0);\n    }\n  }, 'first'));\n}; // indicates if a link to the previous series of 10 links should be rendered\n\n\nvar shouldRenderPreviousSeries = function shouldRenderPreviousSeries(currentPage) {\n  return currentPage >= 10;\n}; // indicates if a link to the next series of 10 links should be rendered\n\n\nvar shouldRenderNextSeries = function shouldRenderNextSeries(currentPage, pageCount) {\n  var position = currentPosition(currentPage);\n  return pageCount > currentPage + (10 - position);\n}; // renders a link with ellipsis text to go to the previous series of 10 page links\n\n\nvar renderPreviousSeries = function renderPreviousSeries(currentPage, onPageClick, pageLinkClassName) {\n  var position = currentPosition(currentPage);\n  return React.createElement('div', {\n    key: 'page-link-previous-series',\n    className: pageLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(currentPage - position - 1);\n    }\n  }, '...'));\n}; // renders a link with ellipsis text to go to the next series of 10 page links\n\n\nvar renderNextSeries = function renderNextSeries(currentPage, pageCount, onPageClick, pageLinkClassName) {\n  var position = currentPosition(currentPage);\n  return React.createElement('div', {\n    key: 'page-link-next-series',\n    className: pageLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(currentPage + (10 - position));\n    }\n  }, '...'));\n}; // indicates if page links should be rendered before the current (current page isn't the first page)\n\n\nvar shouldRenderBefore = function shouldRenderBefore(currentPage) {\n  return currentPage !== 0;\n};\n\nvar renderPreviousLink = function renderPreviousLink(currentPage, onPageClick, pageLinkClassName) {\n  return [React.createElement('div', {\n    key: 'page-link-previous',\n    className: pageLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(currentPage - 1);\n    }\n  }, 'previous'))];\n}; // render page links before current\n\n\nvar renderBeforeCurrent = function renderBeforeCurrent(currentPage, onPageClick, pageLinkClassName) {\n  var position = currentPosition(currentPage);\n  var nodes = [];\n\n  var _loop = function _loop(i) {\n    nodes.push(React.createElement('div', {\n      key: 'page-link-before-' + i,\n      className: pageLinkClassName\n    }, React.createElement(Link, {\n      onClick: function onClick() {\n        onPageClick(i);\n      }\n    }, i + 1)));\n  };\n\n  for (var i = currentPage - position; i < currentPage; i++) {\n    _loop(i);\n  }\n\n  return nodes;\n}; // renders the current page link\n\n\nvar renderCurrent = function renderCurrent(currentPage, onPageClick, pageLinkClassName, currentLinkClassName) {\n  return React.createElement('div', {\n    key: 'page-link-current',\n    className: pageLinkClassName + ' ' + currentLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(currentPage);\n    }\n  }, currentPage + 1));\n}; // render page links after current\n\n\nvar renderAfterCurrent = function renderAfterCurrent(currentPage, pageCount, onPageClick, pageLinkClassName) {\n  var position = currentPosition(currentPage);\n  var nodes = [];\n\n  var _loop2 = function _loop2(i) {\n    nodes.push(React.createElement('div', {\n      key: 'page-link-after-' + i,\n      className: pageLinkClassName\n    }, React.createElement(Link, {\n      onClick: function onClick() {\n        onPageClick(i);\n      }\n    }, i + 1)));\n  };\n\n  for (var i = currentPage + 1; i < currentPage + (10 - position) && i < pageCount; i++) {\n    _loop2(i);\n  }\n\n  return nodes;\n}; // indicates if a \"next\" link should be rendered\n\n\nvar shouldRenderNext = function shouldRenderNext(currentPage, pageCount) {\n  return currentPage + 1 !== pageCount;\n};\n\nvar renderNextLink = function renderNextLink(currentPage, onPageClick, pageLinkClassName) {\n  return React.createElement('div', {\n    key: 'page-link-next',\n    className: pageLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(currentPage + 1);\n    }\n  }, 'next'));\n};\n\nvar renderLastLink = function renderLastLink(pageCount, onPageClick, pageLinkClassName) {\n  return React.createElement('div', {\n    key: 'page-link-last',\n    className: pageLinkClassName\n  }, React.createElement(Link, {\n    onClick: function onClick() {\n      onPageClick(pageCount - 1);\n    }\n  }, 'last'));\n}; // calculate where the current page position is in series of 10 (ex: 27 is position 7)\n\n\nvar currentPosition = function currentPosition(currentPage) {\n  return currentPage % 10;\n};\n\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}