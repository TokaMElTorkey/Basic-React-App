'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_React$Component) {
  _inherits(Pagination, _React$Component);

  function Pagination() {
    _classCallCheck(this, Pagination);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Pagination.prototype.render = function render() {
    // Only show 10 page links at a time
    var linkCount = this.props.pageCount > 10 ? 10 : this.props.pageCount;
    var _props = this.props,
        pageCount = _props.pageCount,
        currentPage = _props.currentPage,
        onPageClick = _props.onPageClick,
        pageLinkClassName = _props.pageLinkClassName,
        currentLinkClassName = _props.currentLinkClassName;


    return _react2.default.createElement(
      'div',
      null,
      renderLinkNodes(linkCount, pageCount, currentPage, onPageClick, pageLinkClassName, currentLinkClassName)
    );
  };

  return Pagination;
}(_react2.default.Component);

process.env.NODE_ENV !== "production" ? Pagination.propTypes = {
  currentPage: _propTypes2.default.number.isRequired,
  pageCount: _propTypes2.default.number.isRequired,
  onPageClick: _propTypes2.default.func.isRequired,
  pageLinkClassName: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired,
  currentLinkClassName: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired
} : void 0;


var renderLinkNodes = function renderLinkNodes(linkCount, pageCount, currentPage, onPageClick, pageLinkClassName, currentLinkClassName) {
  // always render link to first page (0)
  var first = [renderFirstLink(onPageClick, pageLinkClassName)];
  // render previous series of links if needed (currentPage >= 10)
  var previousSeries = shouldRenderPreviousSeries(currentPage) ? renderPreviousSeries(currentPage, onPageClick, pageLinkClassName) : [];
  // render link to previous page if needed (not on first page)
  var previous = shouldRenderBefore(currentPage) ? renderPreviousLink(currentPage, onPageClick, pageLinkClassName) : [];
  // render links to pages before current page
  var beforeCurrent = renderBeforeCurrent(currentPage, onPageClick, pageLinkClassName);
  // render current page link
  var current = renderCurrent(currentPage, onPageClick, pageLinkClassName, currentLinkClassName);
  // render links to pages after current page
  var afterCurrent = renderAfterCurrent(currentPage, pageCount, onPageClick, pageLinkClassName);
  // render next series of links if needed
  var nextSeries = shouldRenderNextSeries(currentPage, pageCount) ? renderNextSeries(currentPage, pageCount, onPageClick, pageLinkClassName) : [];
  // always render link to last page (pageCount - 1)
  var last = renderLastLink(pageCount, onPageClick, pageLinkClassName);

  var nodes = first.concat(previous) // previous
  .concat(previousSeries) // ...
  .concat(beforeCurrent) // 1,2,3,4
  .concat(current) // 5
  .concat(afterCurrent) // 6, 7, 8, 9, 10
  .concat(nextSeries); // ...

  // render a link to the next page if needed (not on last page)
  if (shouldRenderNext(currentPage, pageCount)) {
    var nextLink = renderNextLink(currentPage, onPageClick, pageLinkClassName);
    return nodes.concat(nextLink) // next
    .concat(last); // last
  }

  return nodes.concat(last);
};

var renderFirstLink = function renderFirstLink(onPageClick, pageLinkClassName) {
  return _react2.default.createElement(
    'div',
    { key: 'page-link-first', className: pageLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(0);
        } },
      'first'
    )
  );
};

// indicates if a link to the previous series of 10 links should be rendered
var shouldRenderPreviousSeries = function shouldRenderPreviousSeries(currentPage) {
  return currentPage >= 10;
};

// indicates if a link to the next series of 10 links should be rendered
var shouldRenderNextSeries = function shouldRenderNextSeries(currentPage, pageCount) {
  var position = currentPosition(currentPage);

  return pageCount > currentPage + (10 - position);
};

// renders a link with ellipsis text to go to the previous series of 10 page links
var renderPreviousSeries = function renderPreviousSeries(currentPage, onPageClick, pageLinkClassName) {
  var position = currentPosition(currentPage);

  return _react2.default.createElement(
    'div',
    { key: 'page-link-previous-series', className: pageLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(currentPage - position - 1);
        } },
      '...'
    )
  );
};

// renders a link with ellipsis text to go to the next series of 10 page links
var renderNextSeries = function renderNextSeries(currentPage, pageCount, onPageClick, pageLinkClassName) {
  var position = currentPosition(currentPage);

  return _react2.default.createElement(
    'div',
    { key: 'page-link-next-series', className: pageLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(currentPage + (10 - position));
        } },
      '...'
    )
  );
};

// indicates if page links should be rendered before the current (current page isn't the first page)
var shouldRenderBefore = function shouldRenderBefore(currentPage) {
  return currentPage !== 0;
};

var renderPreviousLink = function renderPreviousLink(currentPage, onPageClick, pageLinkClassName) {
  return [_react2.default.createElement(
    'div',
    { key: 'page-link-previous', className: pageLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(currentPage - 1);
        } },
      'previous'
    )
  )];
};

// render page links before current
var renderBeforeCurrent = function renderBeforeCurrent(currentPage, onPageClick, pageLinkClassName) {
  var position = currentPosition(currentPage);
  var nodes = [];

  var _loop = function _loop(i) {
    nodes.push(_react2.default.createElement(
      'div',
      { key: 'page-link-before-' + i, className: pageLinkClassName },
      _react2.default.createElement(
        _Link2.default,
        { onClick: function onClick() {
            onPageClick(i);
          } },
        i + 1
      )
    ));
  };

  for (var i = currentPage - position; i < currentPage; i++) {
    _loop(i);
  }return nodes;
};

// renders the current page link
var renderCurrent = function renderCurrent(currentPage, onPageClick, pageLinkClassName, currentLinkClassName) {
  return _react2.default.createElement(
    'div',
    { key: 'page-link-current', className: pageLinkClassName + ' ' + currentLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(currentPage);
        } },
      currentPage + 1
    )
  );
};

// render page links after current
var renderAfterCurrent = function renderAfterCurrent(currentPage, pageCount, onPageClick, pageLinkClassName) {
  var position = currentPosition(currentPage);
  var nodes = [];

  var _loop2 = function _loop2(i) {
    nodes.push(_react2.default.createElement(
      'div',
      { key: 'page-link-after-' + i, className: pageLinkClassName },
      _react2.default.createElement(
        _Link2.default,
        { onClick: function onClick() {
            onPageClick(i);
          } },
        i + 1
      )
    ));
  };

  for (var i = currentPage + 1; i < currentPage + (10 - position) && i < pageCount; i++) {
    _loop2(i);
  }return nodes;
};

// indicates if a "next" link should be rendered
var shouldRenderNext = function shouldRenderNext(currentPage, pageCount) {
  return currentPage + 1 !== pageCount;
};

var renderNextLink = function renderNextLink(currentPage, onPageClick, pageLinkClassName) {
  return _react2.default.createElement(
    'div',
    { key: 'page-link-next', className: pageLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(currentPage + 1);
        } },
      'next'
    )
  );
};

var renderLastLink = function renderLastLink(pageCount, onPageClick, pageLinkClassName) {
  return _react2.default.createElement(
    'div',
    { key: 'page-link-last', className: pageLinkClassName },
    _react2.default.createElement(
      _Link2.default,
      { onClick: function onClick() {
          onPageClick(pageCount - 1);
        } },
      'last'
    )
  );
};

// calculate where the current page position is in series of 10 (ex: 27 is position 7)
var currentPosition = function currentPosition(currentPage) {
  return currentPage % 10;
};

exports.default = Pagination;
module.exports = exports['default'];